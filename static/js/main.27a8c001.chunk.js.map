{"version":3,"sources":["serviceWorker.js","services/reducerNoteMaking.js","component/noteMaking.jsx","index.js"],"names":["Boolean","window","location","hostname","match","initialState","notes","localStorage","getItem","JSON","parse","reducer","state","action","console","log","newState","type","index","findIndex","s","id","obj","setItem","stringify","splice","filter","NoteMaking","date","Date","note","title","content","months","selectedNote","showEdit","onDateChange","setState","handleChange","e","input","currentTarget","name","value","handleSubmit","preventDefault","props","length","nextId","sort","a","b","getDate","getMonth","getFullYear","addToNotes","handleChangeSel","handleSubmitSel","updateNotes","handleEdit","handleDelete","deleteNote","this","filteredNotes","d","className","style","backgroundColor","onChange","onSubmit","htmlFor","required","onClick","handleReset","Fragment","scope","map","key","alert","handleResetSel","Component","connect","dispatch","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.27a8c001.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n  notes: localStorage.getItem(\"notes\")\n    ? JSON.parse(localStorage.getItem(\"notes\"))\n    : [],\n};\nconst reducer = (state = initialState, action) => {\n  console.log(\"pre\", state, action);\n  const newState = { ...state };\n  let notes = newState.notes;\n  if (action.type === \"ADD_NOTES\") {\n    let index = notes.findIndex((s) => s.id === action.obj.id);\n    if (index === -1) {\n      newState.notes = [...newState.notes, action.obj];\n    }\n    localStorage.setItem(\"notes\", JSON.stringify(newState.notes));\n    return {\n      ...newState,\n      notes: newState.notes,\n    };\n  } else if (action.type === \"UPDATE_NOTES\") {\n    let index = notes.findIndex((s) => s.id === action.obj.id);\n    if (index === -1) {\n    } else {\n      newState.notes.splice(index, 1);\n      newState.notes = [...newState.notes, action.obj];\n    }\n    localStorage.setItem(\"notes\", JSON.stringify(newState.notes));\n    return {\n      ...newState,\n      notes: newState.notes,\n    };\n  } else if (action.type === \"DELETE_NOTE\") {\n    newState.notes = notes.filter((s) => s.id !== action.obj.id);\n    localStorage.setItem(\"notes\", JSON.stringify(newState.notes));\n    return {\n      ...newState,\n      notes: newState.notes,\n    };\n  }\n\n  return state;\n};\nexport default reducer;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Calendar from \"react-calendar\";\nclass NoteMaking extends Component {\n  state = {\n    date: localStorage.getItem(\"date\")\n      ? new Date(localStorage.getItem(\"date\"))\n      : \"\",\n    note: { title: \"\", content: \"\" },\n    months: [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ],\n    selectedNote: {},\n    showEdit: 0,\n  };\n  onDateChange = (date) => {\n    localStorage.setItem(\"date\", date);\n    this.setState({ date });\n  };\n  handleChange = (e) => {\n    let { currentTarget: input } = e;\n    const { note } = this.state;\n    note[input.name] = input.value;\n    this.setState({ note });\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { date, note, months } = this.state;\n    const { notes } = this.props;\n    if (notes.length > 0) {\n      var sortedNotes = notes.sort((a, b) => b.id - a.id);\n      var nextId = sortedNotes[0].id + 1;\n    }\n    nextId = nextId ? nextId : 1;\n    let d =\n      date.getDate() + \" \" + months[date.getMonth()] + \",\" + date.getFullYear();\n    //let id = notes.length + 1+\",\" +d;\n    let obj = { id: nextId, date: d, title: note.title, content: note.content };\n    this.props.addToNotes(obj);\n    let newNote = { title: \"\", content: \"\" };\n    this.setState({ note: newNote });\n  };\n  handleChangeSel = (e) => {\n    e.preventDefault();\n    let { currentTarget: input } = e;\n    const { selectedNote } = this.state;\n    selectedNote[input.name] = input.value;\n    this.setState({ selectedNote });\n  };\n  handleSubmitSel = (e) => {\n    e.preventDefault();\n    const { selectedNote } = this.state;\n    this.props.updateNotes(selectedNote);\n    this.setState({ selectedNote: {}, showEdit: 0 });\n  };\n  handleReset() {\n    let note = { title: \"\", content: \"\" };\n    this.setState({ note });\n  }\n  handleResetSel() {\n    this.setState({ selectedNote: {}, showEdit: 0 });\n  }\n  handleEdit = (obj) => {\n    let selectedNote = { ...obj };\n    this.setState({ selectedNote, showEdit: 1 });\n  };\n  handleDelete = (obj) => {\n    this.props.deleteNote(obj);\n  };\n  render() {\n    const { notes } = this.props;\n    const { note, date, months, selectedNote, showEdit } = this.state;\n    console.log(date);\n    let filteredNotes = [];\n    if (date) {\n      let d =\n        date.getDate() +\n        \" \" +\n        months[date.getMonth()] +\n        \",\" +\n        date.getFullYear();\n      filteredNotes = notes.filter((obj) => obj.date === d);\n    }\n    return (\n      <div className=\"container\">\n        <div className=\"row\" style={{ backgroundColor: \"dodgerblue\" }}>\n          <div className=\"col-lg-6 col-12\">\n            <div className=\"row\">\n              <div className=\"col-12 d-flex justify-content-center mb-2\">\n                <Calendar value={date} onChange={this.onDateChange} />\n              </div>\n              {date ? (\n                <div className=\"col-12 mt-2\">\n                  <div className=\"row d-flex justify-content-center\">\n                    <h3>Add Note</h3>\n                  </div>\n                  <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"title\">Title</label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        name=\"title\"\n                        required={true}\n                        value={note.title}\n                        onChange={this.handleChange}\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"content\">Content</label>\n                      <textarea\n                        type=\"textArea\"\n                        className=\"form-control\"\n                        name=\"content\"\n                        required={true}\n                        value={note.content}\n                        onChange={this.handleChange}\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <div className=\"row\">\n                        <div className=\"col-6\">\n                          <button className=\"btn btn-success\" type=\"submit\">\n                            Save\n                          </button>\n                        </div>\n                        <div className=\"col-6 d-flex justify-content-end\">\n                          <button\n                            className=\"btn btn-secondary\"\n                            type=\"button\"\n                            onClick={() => this.handleReset()}\n                          >\n                            Discard\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </form>\n                </div>\n              ) : (\n                \"\"\n              )}\n            </div>\n          </div>\n          <div className=\"col-lg-6 col-12\">\n            <div className=\"row d-flex justify-content-center\">\n              <h3>All Notes</h3>\n            </div>\n            <hr />\n            {filteredNotes.length > 0 ? (\n              <React.Fragment>\n                <div className=\"row d-flex justify-content-center mb-2\">\n                  <h5>\n                    {date.getDate()} {months[date.getMonth()]},\n                    {date.getFullYear()}\n                  </h5>\n                </div>\n                <hr />\n                <table className=\"table\">\n                  <thead>\n                    <tr>\n                      <th scope=\"col\">#</th>\n                      <th scope=\"col\">Title</th>\n                      <th> </th>\n                      <th> </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filteredNotes.map((obj, index) => (\n                      <React.Fragment key={obj.title}>\n                        <tr>\n                          <th scope=\"row\">{index + 1}</th>\n                          <td onClick={() => alert(JSON.stringify(obj))}>\n                            {obj.title}\n                          </td>\n                          <td>\n                            <button\n                              className=\"btn btn-sm btn-secondary\"\n                              onClick={() => this.handleEdit(obj)}\n                            >\n                              Edit\n                            </button>\n                          </td>\n                          <td>\n                            <button\n                              className=\"btn btn-sm btn-danger\"\n                              onClick={() => this.handleDelete(obj)}\n                            >\n                              Delete\n                            </button>\n                          </td>\n                        </tr>\n                      </React.Fragment>\n                    ))}\n                  </tbody>\n                </table>\n                {showEdit ? (\n                  <div className=\"col-12 mt-3\">\n                    <div className=\"row d-flex justify-content-center\">\n                      <h3>Edit Note ({selectedNote.date})</h3>\n                    </div>\n                    <form onSubmit={this.handleSubmitSel}>\n                      <div className=\"form-group\">\n                        <label htmlFor=\"title\">Title</label>\n                        <input\n                          type=\"text\"\n                          className=\"form-control\"\n                          name=\"title\"\n                          required={true}\n                          value={selectedNote.title}\n                          onChange={this.handleChangeSel}\n                        />\n                      </div>\n                      <div className=\"form-group\">\n                        <label htmlFor=\"content\">Content</label>\n                        <textarea\n                          type=\"textArea\"\n                          className=\"form-control\"\n                          name=\"content\"\n                          required={true}\n                          value={selectedNote.content}\n                          onChange={this.handleChangeSel}\n                        />\n                      </div>\n                      <div className=\"form-group\">\n                        <div className=\"row\">\n                          <div className=\"col-6\">\n                            <button className=\"btn btn-success\" type=\"submit\">\n                              Save\n                            </button>\n                          </div>\n                          <div className=\"col-6 d-flex justify-content-end\">\n                            <button\n                              className=\"btn btn-secondary\"\n                              type=\"button\"\n                              onClick={() => this.handleResetSel()}\n                            >\n                              Discard\n                            </button>\n                          </div>\n                        </div>\n                      </div>\n                    </form>\n                  </div>\n                ) : (\n                  \"\"\n                )}\n              </React.Fragment>\n            ) : (\n              <h6 className=\"d-flex justify-content-center\">\n                No Note Available for today.\n              </h6>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  console.log(state);\n  return {\n    notes: state.notes,\n  };\n};\nconst mapDispachToProps = (dispatch) => {\n  return {\n    addToNotes: (obj) => dispatch({ type: \"ADD_NOTES\", obj: obj }),\n    updateNotes: (obj) => dispatch({ type: \"UPDATE_NOTES\", obj: obj }),\n    deleteNote: (obj) => dispatch({ type: \"DELETE_NOTE\", obj: obj }),\n  };\n};\nexport default connect(mapStateToProps, mapDispachToProps)(NoteMaking);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"react-calendar/dist/Calendar.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport reducer from \"./services/reducerNoteMaking\";\nimport NoteMaking from \"./component/noteMaking\";\nconst store = createStore(reducer);\nReactDOM.render(\n  <Provider store={store}>\n    <NoteMaking />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}